#!/bin/ksh
#
set -x

# DEFINITIONS
export PLOT_DIR=/media/robert/HDD/WRF/Plotting
export TOP_DIR=/media/robert/HDD/WRF
export DOMAINPATH=${TOP_DIR}/MSThesis
export WRFPATH=${WRF_DIR}/gcc/WRFV3
export UNIPOST_HOME=${TOP_DIR}/UPPV3.0
export POSTEXEC=${UNIPOST_HOME}/bin
export SCRIPTS=${UNIPOST_HOME}/scripts
export modelDataPath=${DOMAINPATH}/postrun_snowenh2            # or nemsprd
export paramFile=${PLOT_DIR}/wrf_cntrl.parm          # or nmb_cntrl.parm
export productsFolder=${PLOT_DIR}/product_images
export GIFsFolder=${productsFolder}/GIFs
#export xmlCntrlFile=${DOMAINPATH}/parm/postcntrl.xml # for grib2

# Specify Dyn Core (ARW or NMM or NMB in upper case)
export dyncore="ARW"

# Set input format from model
export inFormat="netcdf"
export outFormat="grib"

# Set date/time, domain information
export startdate=2009010900
export fhr=00
export lastfhr=60
export incrementhr=01
export domain_list="d01"
export RUN_COMMAND="mpirun -np 12 ${POSTEXEC}/unipost.exe "

export cleanImagesOnRun="1"

export copygb_opt="lambert"
export tmmark=tm00
export MP_SHARED_MEMORY=yes
export MP_LABELIO=yes

if [ $cleanImagesOnRun = "1" ]; then
  rm ${productsFolder}/*.png
fi

#----------------------------------------------------------------------
#--- END USER EDIT ----------------------------------------------------
#----------------------------------------------------------------------

if [ $dyncore = "ARW" ]; then
   export tag=NCAR
elif [ $dyncore = "NMM" ]; then
   export tag=NMM
elif [ $dyncore = "NMB" ]; then
   export tag=NMM
else
    echo "${dyncore} is not supported. Edit script to choose ARW or NMM or NMB dyncore."
    exit
fi

if [[ ${dyncore} == "ARW" || ${dyncore} == "NMM" ]]; then
   if [[ ${inFormat} != "netcdf" && ${inFormat} != "binary" && ${inFormat} != "binarympiio" ]]; then
      echo "ERROR: 'inFormat' must be 'netcdf' or 'binary' or 'binarympiio' for ARW or NMM model output. Exiting... "
      exit 1
   fi 
elif [ ${dyncore} == "NMB" ]; then
   if [[ ${inFormat} != "binarynemsio" ]]; then
      echo "ERROR: 'inFormat' must be 'binarynemsio' for NMB model output. Exiting... "
      exit 1
   fi
fi

if [[ ${outFormat} == "grib" ]]; then
   if [ ! -e ${paramFile} ]; then
      echo "ERROR: 'paramFile' not found in '${paramFile}'.  Exiting... "
      exit 1
   fi
elif [[ ${outFormat} == "grib2" ]]; then
   if [ ! -e ${xmlCntrlFile} ]; then
      echo "ERROR: 'xmlCntrlFile' not found in '${xmlCntrlFile}'.  Exiting... "
      exit 1
   fi
fi
 
if [ ! -d ${DOMAINPATH}/postprd ]; then
  echo "ERROR: DOMAINPATH/postprd, '${DOMAINPATH}/postprd', does not exist. Exiting..."
  exit 1
fi

if [ ${incrementhr} -eq 0 ]; then
  echo "ERROR: increment hour (incrementhr) cannot be zero. Inifinite loop will result. Please modify. Exiting..."
  exit 1
fi

if [ ${copygb_opt} == 'awips' ]; then
   if [ -z ${awips_id} ]; then
      echo "ERROR: copygb_opt = '${copygb_opt}', must uncomment and set 'awips_id'. Exiting..."
      exit 1
   fi
fi

if [ ${copygb_opt} == 'custom' ]; then
   if [ -z ${custom_gds} ]; then
      echo "ERROR: copygb_opt = '${copygb_opt}', must uncomment and set 'custom_gds'. Exiting..."
      exit 1
   fi
fi

#----------------------------------------------------------------------
# End checks of user input
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#  Begin work
#----------------------------------------------------------------------

# cd to working directory
cd ${DOMAINPATH}/postprd
err1=$?
if test "$err1" -ne 0
then
echo "ERROR: Could not 'cd' to working directory. Did you create directory: '${DOMAINPATH}/postprd'?  \
Does '${DOMAINPATH}' exist?  Exiting... "
exit 1
fi

# GrADS's fonts for plotting.
ln -sf ${SCRIPTS}/cbar.gs . 

export NEWDATE=$startdate

while [ $((10#${fhr})) -le $((10#${lastfhr})) ] ; do

# Formatted fhr for filenames
fhr=`printf "%02i" ${fhr}`

NEWDATE=`${POSTEXEC}/ndate.exe +$((10#${fhr})) $startdate`

YY=`echo $NEWDATE | cut -c1-4`
MM=`echo $NEWDATE | cut -c5-6`
DD=`echo $NEWDATE | cut -c7-8`
HH=`echo $NEWDATE | cut -c9-10`

echo 'NEWDATE' $NEWDATE
echo 'YY' $YY

# Begin looping through domains list
# ie. for domain in d01 d02 d03
for domain in ${domain_list}
do

#if [ $dyncore = "ARW" ]; then
#  ln -s WRFPRS_${domain}.${fhr} wrfprs_${domain}.${fhr}
#fi # End if-block for if NMM or NMB or ARW

#######################################################
# 3. Run GrADS to plot results.
# Use GrADS to first create GrADS control and index 
# (or bitmap) files and then plot various fields.
#######################################################

fname=wrfprs_${domain}.${fhr}
cntlfname=wrfprs_${domain}_${fhr}

rm -f ${cntlfname}.ctl

${PLOT_DIR}/grib2ctl.pl -verf ${fname} > ${cntlfname}.ctl

cp ${cntlfname}.ctl ${cntlfname}.ctl_org

# creating GrADS index or bitmap file

gribmap -i ${cntlfname}.ctl

#grads << EOF

grads -bxcl "run /media/robert/HDD/WRF/Plotting/doplots.gs ${cntlfname}.ctl ${fhr} ${domain} ${YY} ${MM} ${DD} ${HH}"

#----------------------------------------------------------------------
#   End of GrADS job
#----------------------------------------------------------------------

done

fhr=$((10#${fhr}+$((${incrementhr}))))

NEWDATE=`${POSTEXEC}/ndate.exe +$((10#${fhr})) $startdate`

done

date
echo "Moving Images to Product Folder"
mv ${DOMAINPATH}/postprd/*.png ${productsFolder}
#echo "Creating GIFs"
#convert -delay 25 -loop 0 ${DOMAINPATH}/postprd/*.png ${productsFolder}/out.gif
echo "End of Output Job"
exit
